{"version":3,"sources":["utils/Shapes.ts","utils/GraphicsManipulator.ts","components/GraphicsCore/GraphicsCore.tsx","utils/HighlightColors.ts","components/SettingsPane/SettingsPane.tsx","utils/mediaHooks/useUserMedia.ts","utils/OpenCVHelper.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Shapes","GraphicsManipulator","context","canvas","event","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","imageData","getImageData","data","r","g","b","pixelRGB","HSV","h","s","v","min","Math","max","delta","hsv","numToAdd","HSV4","GraphicsCore","cvHelper","canvasEl","useRef","useEffect","canvasUpdatingInterval","canvasElCurrent","current","getContext","setCanvasElCurrent","addEventListener","getPixelRGB","hsvSelectColor","RGBtoHSV","setHSVSelectColor","setInterval","a","toDraw","getLatestVideoFrame","drawImage","window","innerWidth","innerHeight","draw","clearInterval","width","height","setSourceAndDestination","className","ref","HIGHLIGHT_COLORS","RED","BLACK","WHITE","GREEN","BLUE","PURPLE","YELLOW","ORANGE","shapes","CIRCLE","RECTANGLE","NONE","SettingsPane","highlightColors","Object","keys","map","color","id","onChange","selectedShape","target","selectedIndex","setShape","shape","key","onClick","getFrameAsImage","selectedColor","setHighlightColor","toLowerCase","USER_MEDIA_CAPTURE_OPTIONS","video","facingMode","exact","useUserMedia","requestedMedia","useState","undefined","mediaStream","setMediaStream","getTracks","forEach","track","stop","enableStream","navigator","mediaDevices","getUserMedia","stream","OpenCVHelper","cv","videoEl","cvVideoCapture","cvSource","cvDestination","cvHSV","cvHSVSelectColor","highlightColor","this","VideoCapture","setHeightAndWidth","Mat","e","console","log","CV_8UC4","CV_8UC1","Error","image","toDataURL","link","document","createElement","download","Date","toISOString","href","click","MatVector","read","copyTo","lowerHSV","GetHsvFormatted","higherHSV","cvtColor","COLOR_RGB2HSV","convertTo","low","rows","cols","type","high","inRange","contours","hierarchy","findContours","RETR_LIST","CHAIN_APPROX_SIMPLE","groupedContoursAsRectangles","groupContoursAsRectangles","drawRect","drawCircle","imshow","delete","contoursAsRectangles","RectVector","weights","IntVector","i","size","obj","get","boundingRect","push_back","groupRectangles","p1","Point","p2","rectangle","radius","centerX","centerY","center","circle","newOpenCVHelper","App","setHeight","setWidth","setVideoEl","srcObject","autoPlay","playsInline","muted","hidden","onCanPlay","play","handleCanPlay","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b32112f.chunk.js","sourcesContent":["// Shapes is the shape of the highlight outline.\nexport enum Shapes {\n\tCIRCLE = \"Circle\",\n\tRECTANGLE = \"Rectangle\",\n\tNONE = \"None\"\n}\n\nexport const RECTANGLE_LINE_WIDTH = 5;\nexport const CIRCLE_LINE_WIDTH = 5;\nexport const LINE_TYPE = 8;","export const BORDER_THRESHOLD = 20;\nexport const HSV_THRESHOLD = 60;\n\nexport class GraphicsManipulator {\n\tstatic getPixelRGB(\n\t\tcontext: CanvasRenderingContext2D,\n\t\tcanvas: HTMLCanvasElement,\n\t\tevent: MouseEvent\n\t): PixelRGB {\n\t\tconst rect = canvas.getBoundingClientRect();\n\t\tconst x = event.clientX - rect.left;\n\t\tconst y = event.clientY - rect.top;\n\t\tconst imageData = context.getImageData(x, y, 1, 1).data;\n\t\treturn {\n\t\t\tr: imageData[0],\n\t\t\tg: imageData[1],\n\t\t\tb: imageData[2]\n\t\t};\n\t}\n\n\t// Code taken from: http://coecsl.ece.illinois.edu/ge423/spring05/group8/finalproject/hsv_writeup.pdf\n\t// based on: https://docs.opencv.org/3.4/de/d25/imgproc_color_conversions.html#color_convert_rgb_hsv \n\tstatic RGBtoHSV(pixelRGB: PixelRGB): PixelHSV {\n\t\tconst { r, g, b } = pixelRGB;\n\n\t\tconst HSV: PixelHSV = {\n\t\t\th: 0,\n\t\t\ts: 0,\n\t\t\tv: 0\n\t\t}\n\n\t\tconst min = Math.min(r, g, b);\n\t\tconst max = Math.max(r, g, b);\n\n\t\t// V\n\t\tHSV.v = max;\n\n\t\t// S\n\t\tconst delta = max - min;\n\t\tif (max === 0) {\n\t\t\tHSV.s = 0;\n\t\t\tHSV.h = -1;\n\t\t\treturn HSV;\n\t\t}\n\n\t\tHSV.s = (delta / max) * 255;\n\n\t\t// H\n\t\tif (r === max) {\n\t\t\tHSV.h = (g - b) / delta;\n\t\t} else if (g === max) {\n\t\t\tHSV.h = 2 + (b - r) / delta;\n\t\t} else {\n\t\t\tHSV.h = 4 + (r - g) / delta;\n\t\t}\n\n\t\tHSV.h *= 60;\n\n\t\tif (HSV.h < 0) {\n\t\t\tHSV.h += 360;\n\t\t}\n\n\t\tHSV.h /= 2;\n\n\t\treturn HSV;\n\t}\n\n\t/**\n\t * Gets formatted hsv\n\t * @param hsv hsv\n\t * @param numToAdd number to offset HSV by\n\t * @param HSV4 4th param opencv requests // TODO: (alpha?)\n\t */\n\tstatic GetHsvFormatted(hsv: PixelHSV, numToAdd: number, HSV4: number): number[] {\n\t\treturn [\n\t\t\thsv.h += numToAdd,\n\t\t\thsv.s += numToAdd,\n\t\t\thsv.v += numToAdd,\n\t\t\tHSV4\n\t\t]\n\t}\n}\n\nexport type PixelRGB = {\n\tr: number,\n\tg: number,\n\tb: number\n}\n\nexport type PixelHSV = {\n\th: number,\n\ts: number,\n\tv: number\n}","import React, { useRef, useEffect } from 'react';\nimport { OpenCVHelper } from '../../utils/OpenCVHelper';\nimport './GraphicsCore.css';\nimport { GraphicsManipulator } from '../../utils/GraphicsManipulator';\n\ntype GraphicsCoreProps = {\n\tcvHelper: OpenCVHelper\n}\n\nconst REFRESH_RATE = 0.017;\nconst HEIGHT_MULTIPLIER = 0.9\n\n// GraphicsCore is the canvas element that also keeps track of all the OpenCV state information\nexport const GraphicsCore: React.FC<GraphicsCoreProps> = ({\n\tcvHelper\n}) => {\n\tconst canvasEl = useRef<HTMLCanvasElement | null>(null);\n\n\tuseEffect(() => {\n\t\tlet canvasUpdatingInterval: NodeJS.Timeout;\n\n\t\tif (canvasEl) {\n\t\t\tconst canvasElCurrent = canvasEl.current;\n\t\t\tif (!canvasElCurrent) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst context = canvasElCurrent.getContext('2d');\n\n\t\t\tif (!context) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcvHelper.setCanvasElCurrent(canvasElCurrent);\n\n\t\t\tcanvasElCurrent.addEventListener(\"mousedown\", (event) => {\n\t\t\t\tconst pixelRGB = GraphicsManipulator.getPixelRGB(context, canvasElCurrent, event);\n\t\t\t\tconst hsvSelectColor = GraphicsManipulator.RGBtoHSV(pixelRGB);\n\t\t\t\tcvHelper.setHSVSelectColor(hsvSelectColor);\n\t\t\t});\n\n\t\t\tcanvasUpdatingInterval = setInterval(async () => {\n\t\t\t\tlet toDraw = cvHelper.getLatestVideoFrame();\n\t\t\t\tcontext.drawImage(toDraw, 0, 0, window.innerWidth, window.innerHeight * HEIGHT_MULTIPLIER);\n\t\t\t\tcvHelper.draw(context, canvasElCurrent);\n\t\t\t}, REFRESH_RATE);\n\t\t}\n\n\t\treturn () => {\n\t\t\tclearInterval(canvasUpdatingInterval);\n\t\t}\n\t}, [canvasEl, cvHelper]);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", () => {\n\t\t\tif (canvasEl && canvasEl.current) {\n\t\t\t\tcanvasEl.current.width = window.innerWidth;\n\t\t\t\tcanvasEl.current.height = window.innerHeight * HEIGHT_MULTIPLIER;\n\t\t\t}\n\n\t\t\tcvHelper.setSourceAndDestination(window.innerHeight * HEIGHT_MULTIPLIER, window.innerWidth);\n\t\t});\n\n\t}, [canvasEl, cvHelper]);\n\n\treturn <div className=\"graphics-core\">\n\t\t<canvas height={window.innerHeight * HEIGHT_MULTIPLIER} width={window.innerWidth} ref={canvasEl} />\n\t</div>\n}","// HighlightColors is the highlight outline colors.\nexport const HIGHLIGHT_COLORS: HighlightColors = {\n\tRED: [255, 0, 0, 255],\n\tBLACK: [0, 0, 0, 255],\n\tWHITE: [255, 255, 255, 255],\n\tGREEN: [0, 255, 0, 255],\n\tBLUE: [0, 0, 255, 255],\n\tPURPLE: [102, 0, 204, 255],\n\tYELLOW: [255, 255, 51, 255],\n\tORANGE: [255, 153, 51, 255]\n}\n\nexport type HighlightColors = {\n\t[color: string]: HighlightColor\n}\n\nexport type HighlightColor = [number, number, number, number]","import React from 'react';\nimport { Shapes } from '../../utils/Shapes';\nimport { OpenCVHelper } from '../../utils/OpenCVHelper';\nimport { HIGHLIGHT_COLORS } from '../../utils/HighlightColors';\nimport { ReactStateSetter } from '../../utils/CallbackType';\n\ntype SettingsPaneProps = {\n\tcvHelper: OpenCVHelper\n}\n\nconst shapes: Shapes[] = [Shapes.CIRCLE, Shapes.RECTANGLE, Shapes.NONE];\n\n// SettingsPane is the bottom bar. When settings are changed, it calls callback functions \n// provided within the props.\nexport const SettingsPane: React.FC<SettingsPaneProps> = ({\n\tcvHelper\n}) => {\n\tconst highlightColors = Object.keys(HIGHLIGHT_COLORS).map((color) => {\n\t\treturn color;\n\t})\n\treturn <div className=\"settings-pane\">\n\t\t<div id=\"shapes-pane\">\n\t\t\t<select onChange={(event) => {\n\t\t\t\tconst selectedShape = shapes[event.target.selectedIndex];\n\t\t\t\tcvHelper.setShape(selectedShape);\n\t\t\t}}>\n\t\t\t\t{shapes.map((shape) => {\n\t\t\t\t\treturn <option key={shape}>\n\t\t\t\t\t\t{shape}\n\t\t\t\t\t</option>\n\t\t\t\t})}\n\t\t\t</select>\n\t\t</div>\n\t\t<div id=\"camera-pane\">\n\t\t\t<button onClick={() => {\n\t\t\t\tcvHelper.getFrameAsImage();\n\t\t\t}}>\n\t\t\t\tTake picture\n\t\t\t</button>\n\t\t</div>\n\t\t<div id=\"colors-pane\">\n\t\t\t<select onChange={(event) => {\n\t\t\t\tconst selectedColor = HIGHLIGHT_COLORS[highlightColors[event.target.selectedIndex]];\n\t\t\t\tcvHelper.setHighlightColor(selectedColor);\n\t\t\t}}>\n\t\t\t\t{highlightColors.map((color) => {\n\t\t\t\t\treturn <option key={color}>\n\t\t\t\t\t\t{color.toLowerCase()}\n\t\t\t\t\t</option>\n\t\t\t\t})}\n\t\t\t</select>\n\t\t</div>\n\t</div>\n}","import { useState, useEffect } from 'react';\nimport { ReactStateSetter } from '../CallbackType';\n\n// useUserMedia is inspired by\n// https://blog.logrocket.com/responsive-camera-component-react-hooks/\n\nexport const USER_MEDIA_CAPTURE_OPTIONS: MediaStreamConstraints = {\n\tvideo: {\n\t\tfacingMode: \"environment\",\n\t\twidth: {\n\t\t\texact: 1280\n\t\t},\n\t\theight: {\n\t\t\texact: 720\n\t\t}\n\t}\n}\n\nexport const useUserMedia = (requestedMedia: MediaStreamConstraints) => {\n\tconst [mediaStream, setMediaStream] = useState<MediaStream | null | undefined>(undefined);\n\n\tuseEffect(() => {\n\t\tif (!mediaStream) {\n\t\t\tenableStream(requestedMedia, setMediaStream);\n\t\t\treturn;\n\t\t}\n\n\t\t// Clean up and remove all media tracks\n\t\treturn () => {\n\t\t\tmediaStream.getTracks().forEach((track) => {\n\t\t\t\ttrack.stop();\n\t\t\t})\n\t\t}\n\t}, [mediaStream, requestedMedia]);\n\n\treturn mediaStream;\n}\n\nasync function enableStream(\n\trequestedMedia: MediaStreamConstraints,\n\tsetMediaStream: ReactStateSetter<MediaStream | null | undefined>\n) {\n\ttry {\n\t\tconst stream = await navigator.mediaDevices.getUserMedia(requestedMedia);\n\t\tsetMediaStream(stream);\n\t} catch (e) {\n\t\tsetMediaStream(null);\n\t}\n}","import { PixelHSV, GraphicsManipulator, BORDER_THRESHOLD, HSV_THRESHOLD } from '../utils/GraphicsManipulator';\nimport { HighlightColor, HIGHLIGHT_COLORS } from './HighlightColors';\nimport { Shapes, RECTANGLE_LINE_WIDTH, CIRCLE_LINE_WIDTH, LINE_TYPE } from './Shapes';\n\n// OpenCVHelper will be the helper class that does a whole bunch of god calculations for\n// GraphicsCore.\nexport class OpenCVHelper {\n\tstatic newOpenCVHelper() {\n\t\treturn new OpenCVHelper();\n\t}\n\n\tprivate videoEl: React.RefObject<HTMLVideoElement> | undefined = undefined;\n\tprivate height: number | undefined = undefined;\n\tprivate width: number | undefined = undefined;\n\tprivate cvVideoCapture: any = undefined;\n\tprivate cvSource: any = undefined;\n\tprivate cvDestination: any = undefined;\n\tprivate cvHSV: any = undefined;\n\tprivate cvHSVSelectColor: PixelHSV | undefined = undefined;\n\tprivate highlightColor: HighlightColor = HIGHLIGHT_COLORS.RED;\n\tprivate shape: Shapes = Shapes.CIRCLE;\n\tprivate canvasElCurrent: HTMLCanvasElement | undefined = undefined;\n\n\tconstructor(\n\t\tprivate cv = window.cv\n\t) { }\n\n\tpublic setVideoEl(videoEl: React.RefObject<HTMLVideoElement>, height: number, width: number) {\n\t\tthis.videoEl = videoEl;\n\t\tif (videoEl.current) {\n\t\t\ttry {\n\t\t\t\tif (this.videoEl.current) {\n\t\t\t\t\tthis.cvVideoCapture = new this.cv.VideoCapture(this.videoEl.current);\n\t\t\t\t}\n\t\t\t\tthis.setHeightAndWidth(height, width);\n\n\t\t\t\t// Check for cv.Mat to prevent race condition\t\n\t\t\t\tif (this.cv.Mat) {\n\t\t\t\t\tthis.setSourceAndDestination(height, width);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"ERR: \", e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setSourceAndDestination(height: number, width: number) {\n\t\tthis.setHeightAndWidth(height, width);\n\t\tthis.cvSource = new this.cv.Mat(height, width, this.cv.CV_8UC4);\n\t\tthis.cvDestination = new this.cv.Mat(height, width, this.cv.CV_8UC1);\n\t\tthis.cvHSV = new this.cv.Mat();\n\t}\n\n\tpublic setHighlightColor(highlightColor: HighlightColor) {\n\t\tthis.highlightColor = highlightColor;\n\t}\n\n\tpublic setShape(shape: Shapes) {\n\t\tthis.shape = shape;\n\t}\n\n\tpublic setHSVSelectColor(cvHSVSelectColor: PixelHSV) {\n\t\tthis.cvHSVSelectColor = cvHSVSelectColor;\n\t}\n\n\tpublic setCanvasElCurrent(canvasElCurrent: HTMLCanvasElement) {\n\t\tif (!this.canvasElCurrent) {\n\t\t\tthis.canvasElCurrent = canvasElCurrent;\n\t\t}\n\t}\n\n\tpublic getLatestVideoFrame() {\n\t\tif (!this.videoEl || !this.videoEl.current) {\n\t\t\tthrow new Error(\"Video is not provided\");\n\t\t}\n\n\t\treturn this.videoEl.current;\n\t}\n\n\tpublic getFrameAsImage() {\n\t\tconst image = this.canvasElCurrent?.toDataURL(\"image/png\");\n\t\tconst link = document.createElement('a');\n\t\tlink.download = `ScreenCapture${(new Date()).toISOString()}.png`;\n\t\tlink.href = image!;\n\t\tlink.click();\n\t}\n\n\tpublic draw(context: CanvasRenderingContext2D, canvasElCurrent: HTMLCanvasElement) {\n\t\tif (\n\t\t\t!this.cv.Mat\n\t\t\t|| !this.cv.MatVector\n\t\t\t|| !this.cvVideoCapture\n\t\t\t|| !this.cvDestination\n\t\t\t|| !this.cvHSVSelectColor\n\t\t\t|| !this.cvHSV\n\t\t\t|| !this.cvSource\n\t\t\t|| !this.height\n\t\t\t|| !this.width\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cvVideoCapture.read(this.cvSource);\n\t\tthis.cvSource.copyTo(this.cvDestination);\n\n\t\tconst lowerHSV = GraphicsManipulator.GetHsvFormatted(this.cvHSVSelectColor, -HSV_THRESHOLD, 0);\n\t\tconst higherHSV = GraphicsManipulator.GetHsvFormatted(this.cvHSVSelectColor, HSV_THRESHOLD, 255);\n\n\t\tthis.cv.cvtColor(this.cvSource, this.cvHSV, this.cv.COLOR_RGB2HSV);\n\t\tthis.cvSource.convertTo(this.cvSource, -1, 2, 0);\n\t\tconst low = new this.cv.Mat(\n\t\t\tthis.cvHSV.rows,\n\t\t\tthis.cvHSV.cols,\n\t\t\tthis.cvHSV.type(),\n\t\t\tlowerHSV\n\t\t);\n\t\tconst high = new this.cv.Mat(\n\t\t\tthis.cvHSV.rows,\n\t\t\tthis.cvHSV.cols,\n\t\t\tthis.cvHSV.type(),\n\t\t\thigherHSV\n\t\t);\n\t\tthis.cv.inRange(this.cvHSV, low, high, this.cvHSV);\n\n\t\tconst contours = new this.cv.MatVector();\n\t\tconst hierarchy = new this.cv.Mat();\n\t\tthis.cv.findContours(\n\t\t\tthis.cvHSV,\n\t\t\tcontours,\n\t\t\thierarchy,\n\t\t\tthis.cv.RETR_LIST,\n\t\t\tthis.cv.CHAIN_APPROX_SIMPLE\n\t\t);\n\t\tconst groupedContoursAsRectangles = this.groupContoursAsRectangles(contours);\n\n\t\tswitch (this.shape) {\n\t\t\tcase Shapes.RECTANGLE: {\n\t\t\t\tthis.drawRect(groupedContoursAsRectangles);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Shapes.CIRCLE: {\n\t\t\t\tthis.drawCircle(groupedContoursAsRectangles);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.cv.imshow(canvasElCurrent, this.cvDestination);\n\n\t\t// Clear memory and unused variables\n\t\tlow.delete();\n\t\thigh.delete();\n\t\tcontours.delete();\n\t\thierarchy.delete();\n\t\tgroupedContoursAsRectangles.delete();\n\t}\n\n\tprivate setHeightAndWidth(height: number, width: number) {\n\t\tthis.height = height;\n\t\tthis.width = width;\n\t}\n\n\tprivate groupContoursAsRectangles(contours: any) {\n\t\tconst contoursAsRectangles = new this.cv.RectVector();\n\t\tconst weights = new this.cv.IntVector();\n\n\t\tfor (let i = 0; i < contours.size(); i++) {\n\t\t\tconst obj = contours.get(i);\n\t\t\tconst rect = this.cv.boundingRect(obj);\n\t\t\tcontoursAsRectangles.push_back(rect);\n\t\t\tcontoursAsRectangles.push_back(rect);\n\t\t}\n\t\tthis.cv.groupRectangles(contoursAsRectangles, weights, 1, 0.8);\n\t\tweights.delete();\n\t\treturn contoursAsRectangles;\n\t}\n\n\tprivate drawRect(contoursAsRectangles: any) {\n\t\tfor (let i = 0; i < contoursAsRectangles.size(); i++) {\n\t\t\tconst rect = contoursAsRectangles.get(i);\n\t\t\tconst p1 = new this.cv.Point(rect.x, rect.y);\n\t\t\tconst p2 = new this.cv.Point(rect.x + rect.width, rect.y + rect.height);\n\n\t\t\tif (rect.width > BORDER_THRESHOLD && rect.height > BORDER_THRESHOLD) {\n\t\t\t\tthis.cv.rectangle(this.cvDestination, p1, p2, this.highlightColor, RECTANGLE_LINE_WIDTH, LINE_TYPE);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate drawCircle(contoursAsRectangles: any) {\n\t\tfor (let i = 0; i < contoursAsRectangles.size(); i++) {\n\t\t\tconst rect = contoursAsRectangles.get(i);\n\t\t\tconst radius = Math.max(rect.width, rect.height) / 2;\n\t\t\tconst centerX = rect.x + rect.width / 2;\n\t\t\tconst centerY = rect.y + rect.height / 2;\n\t\t\tconst center = new this.cv.Point(centerX, centerY);\n\t\t\tif (rect.width > BORDER_THRESHOLD && rect.height > BORDER_THRESHOLD) {\n\t\t\t\tthis.cv.circle(this.cvDestination, center, radius, this.highlightColor, CIRCLE_LINE_WIDTH, LINE_TYPE);\n\t\t\t}\n\t\t}\n\t}\n}","import React, { useState, useRef, useEffect, } from 'react';\nimport { GraphicsCore } from './components/GraphicsCore/GraphicsCore';\nimport { SettingsPane } from './components/SettingsPane/SettingsPane';\nimport { useUserMedia, USER_MEDIA_CAPTURE_OPTIONS } from './utils/mediaHooks/useUserMedia';\nimport { OpenCVHelper } from './utils/OpenCVHelper';\nimport './App.css';\n\nconst cvHelper = OpenCVHelper.newOpenCVHelper();\n\n// App is the main app that holds functionality of everything\n// \n// it does NOT control the state of the selected position. That is within GraphicsCore\nconst App: React.FC = () => {\n\tconst [height, setHeight] = useState<number>(window.innerHeight);\n\tconst [width, setWidth] = useState<number>(window.innerWidth);\n\tconst videoEl = useRef<HTMLVideoElement>(null);\n\tconst mediaStream = useUserMedia(USER_MEDIA_CAPTURE_OPTIONS);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", () => {\n\t\t\tsetHeight(window.innerHeight);\n\t\t\tsetWidth(window.innerWidth);\n\t\t})\n\t})\n\n\tif (videoEl) {\n\t\tcvHelper.setVideoEl(videoEl, height * 0.9, width);\n\t}\n\n\tif (\n\t\tmediaStream\n\t\t&& videoEl.current\n\t\t&& !videoEl.current.srcObject\n\t) {\n\t\tvideoEl.current.srcObject = mediaStream;\n\t}\n\n\treturn (\n\t\t<div className=\"main-app\">\n\t\t\t<GraphicsCore cvHelper={cvHelper} />\n\t\t\t<SettingsPane cvHelper={cvHelper} />\n\t\t\t<div>\n\t\t\t\t<video\n\t\t\t\t\tautoPlay\n\t\t\t\t\tplaysInline\n\t\t\t\t\tmuted\n\t\t\t\t\thidden\n\t\t\t\t\tonCanPlay={() => handleCanPlay(videoEl)}\n\t\t\t\t\theight={height * 0.9}\n\t\t\t\t\twidth={width}\n\t\t\t\t\tref={videoEl}\n\t\t\t\t\tid=\"video-el\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n// silently fails if cannot play video\nfunction handleCanPlay(videoEl: React.RefObject<HTMLVideoElement>) {\n\tvideoEl.current?.play();\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}