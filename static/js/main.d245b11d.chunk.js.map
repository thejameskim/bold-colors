{"version":3,"sources":["assets/main-image.png","assets/main-image-circles.png","assets/background-1.png","assets/background-1-circles.png","assets/outline-1.png","assets/boldcolors.png","serviceWorker.js","utils/GlobalContext/GlobalContext.js","_ENABLED_FEATURES/EnabledFeatures.js","utils/generateQuadArray/generateQuadArray.js","components/Main/Headline/Headline.js","components/Main/About/About.js","index.js","components/Main/Main.js","utils/hooks/useWindowWidth.js","utils/hooks/useScrollPosition.js"],"names":["module","exports","Boolean","window","location","hostname","match","GlobalContext","createContext","scrollPosition","windowWidth","EnabledFeatures","genQuadArr","num","ReactDOM","render","useState","innerWidth","width","setWidth","useEffect","addEventListener","useWindowWidth","scrollY","setScrollPosition","removeEventListener","useScrollPosition","test","i","push","Provider","value","src","fullImage","style","height","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,8MCYvBC,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCAK,IAAMC,EAAgBC,wBAAc,CAC1CC,eAAgB,EAChBC,YAAa,I,0ECjBDC,GACF,ECJJ,SAASC,EAAWC,GAC1B,MAAO,CAACA,EAAKA,EAAKA,EAAKA,GCyBfD,EAAW,GAQZA,GAAY,I,MClBDA,EAAW,IACXA,EAAW,IACPA,EAAW,IAiBfA,EAAW,IACXA,EAAW,IACPA,EAAW,IAiBfA,EAAW,KACXA,EAAW,IACPA,EAAW,IAOzBA,GAAY,IAUFA,EAAW,KACXA,EAAW,IACPA,EAAW,K,oBCrElCE,IAASC,OAAO,mBCKT,WAKN,IAJA,IAAML,ECPA,WAA2B,IAAD,EACNM,mBAASb,OAAOc,YADV,mBACzBC,EADyB,KAClBC,EADkB,KAShC,OANAC,qBAAU,WACTjB,OAAOkB,iBAAiB,UAAU,WACjCF,EAAShB,OAAOc,iBAEf,IAEIC,EDFaI,GACdb,EEPA,WAA8B,IAAD,EACSO,mBAASb,OAAOoB,SADzB,mBAC5Bd,EAD4B,KACZe,EADY,KAenC,OAZAJ,qBAAU,WAOT,OANIT,GACHR,OAAOkB,iBAAiB,UAAU,WACjCG,EAAkBrB,OAAOoB,YAIpB,WACNpB,OAAOsB,oBAAoB,aAE1B,IAEIhB,EFRgBiB,GAEnBC,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAIA,IACvBD,EAAKE,KAAK,8BAGX,OAAO,oCACN,kBAACtB,EAAcuB,SAAf,CAAwBC,MAAO,CAC9BtB,iBACAC,gBAQA,yBAAKsB,IAAKC,IAAWC,MAAO,CAC3BhB,MAAO,OACPiB,OAAQ,cD3BI,MAAUC,SAASC,eAAe,SN6H7C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAClCA,EAAaC,kB","file":"static/js/main.d245b11d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main-image.09fe9c46.png\";","module.exports = __webpack_public_path__ + \"static/media/main-image-circles.6c749a8a.png\";","module.exports = __webpack_public_path__ + \"static/media/background-1.029b5100.png\";","module.exports = __webpack_public_path__ + \"static/media/background-1-circles.4c554fff.png\";","module.exports = __webpack_public_path__ + \"static/media/outline-1.650be8ec.png\";","module.exports = __webpack_public_path__ + \"static/media/boldcolors.974a52d8.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import { createContext } from 'react';\n\n/**\n * GlobalContext will be a global state we can utilize from everywhere without passing props down all the time\n * \n * To add another field, add it to this GlobalContext and then within components/Main/Main.js (where we have the \n * GlobalContext.Provider, define some value that is set to the GlobalContext. Whenever state is updated in \n * Main.js for whatever value you need, it will be sent to the GlobalContext value)\n * \n * Usage: \n * ```js\n * import { useContext } from 'react';\n * import { GlobalContext } from '/GlobalContext';\n * \n * // within react component, use as a hook\n * const { windowWidth } = useContext(GlobalContext);\n * ```\n */\nexport const GlobalContext = createContext({\n\tscrollPosition: 0,\n\twindowWidth: 0\n})","/**\n * Enabled Features is a list of features that are enabled or disabled, so we can easily toggle features\n */\nexport const EnabledFeatures = {\n\tColorify: true\n}","export function genQuadArr(num) {\n\treturn [num, num, num, num];\n}","import React, { useContext } from 'react';\nimport './Headline.css';\nimport * as mainImage from '../../../assets/main-image.png';\nimport * as mainImageCircles from '../../../assets/main-image-circles.png';\nimport * as background1 from '../../../assets/background-1.png';\nimport * as background1Circles from '../../../assets/background-1-circles.png';\nimport * as outline1 from '../../../assets/outline-1.png';\nimport { GlobalContext } from '../../../utils/GlobalContext/GlobalContext';\nimport { viewportSizeIndex } from '../../../utils/isMobile/isMobile';\nimport { BackgroundTriangle } from '../../BackgroundTriangle/BackgroundTriangle';\nimport { FloatingImage } from '../../FloatingImage/FloatingImage';\nimport { genQuadArr } from '../../../utils/generateQuadArray/generateQuadArray';\n\nconst HEADLINE_MAIN = \"Boldly Tackle Your Next Route\";\nconst SUB_TEXT = \"What is bold colors?\";\nconst DESCRIPTION = \"A route planning application to empower colorblind boulderers on their next adventure\";\nconst BUTTON_TEXT = \"Show me the Route\";\nconst BUTTON_LINK = \"#\";\n\nconst IMAGES = [\n\t{\n\t\timage: mainImage,\n\t\tsecondaryImage: mainImageCircles,\n\t\twidth: [200, 300, 500, 700],\n\t\twidthPercentage: false,\n\t\tbottom: [-250, -300, -550, -400],\n\t\tright: genQuadArr(0),\n\t},\n\t{\n\t\timage: background1,\n\t\tsecondaryImage: background1Circles,\n\t\twidth: [200, 300, 400, 700],\n\t\twidthPercentage: false,\n\t\tbottom: [-250, -300, -400, -460],\n\t\tleft: genQuadArr(-70)\n\t},\n\t{\n\t\tsecondaryImage: outline1,\n\t\twidth: [200, 300, 400, 600],\n\t\twidthPercentage: false,\n\t\ttop: [-200, -300, -370, -450],\n\t\tright: [40, 60, 100, 140]\n\t}\n]\n\nexport function Headline() {\n\tconst { windowWidth } = useContext(GlobalContext);\n\tconst vpIndex = viewportSizeIndex(windowWidth);\n\n\treturn <div className=\"headline\">\n\t\t<div className=\"headline-inner\">\n\t\t\t{IMAGES.map((img, i) => {\n\t\t\t\treturn <FloatingImage key={i} image={img} vpIndex={vpIndex} />\n\t\t\t})}\n\t\t\t<div className=\"headline-content\">\n\t\t\t\t<div className=\"headline-text-group\">\n\t\t\t\t\t<h1 className=\"headline-main\">{HEADLINE_MAIN}</h1>\n\t\t\t\t\t<h3 className=\"headline-sub-text\">{SUB_TEXT}</h3>\n\t\t\t\t\t<p className=\"headline-description\">{DESCRIPTION}</p>\n\t\t\t\t\t<a href={BUTTON_LINK}><button className=\"headline-button\">{BUTTON_TEXT}</button></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<BackgroundTriangle\n\t\t\theight={[200, 200, 300, 320][vpIndex]}\n\t\t\tdirection=\"TOP_LEFT\"\n\t\t/>\n\t</div>\n}","import React, { useContext } from 'react';\nimport './About.css';\nimport { GlobalContext } from '../../../utils/GlobalContext/GlobalContext';\nimport { viewportSizeIndex } from '../../../utils/isMobile/isMobile';\nimport { genQuadArr } from '../../../utils/generateQuadArray/generateQuadArray';\nimport { MAIN_COLOR } from '../../../utils/constants/COLOR';\nimport { BackgroundTriangle } from '../../BackgroundTriangle/BackgroundTriangle';\n\nconst HEADER = \"Why Bold Colors?\";\nconst TEXT_DESCRIPTIONS = [\n\t{\n\t\theadline: \"8% of the world population is colorblind.\",\n\t\tdescription: \"That doesn't seem like much, but that means that about 500 million people of the world deal with some sort of colorblindness.\",\n\t\ttextAlign: \"right\",\n\t\tmarginRight: '0%',\n\t\tmarginLeft: 'auto',\n\t\tmarginTopBottom: genQuadArr(40),\n\t\twidthPercentage: genQuadArr(70),\n\t\tdescWidthPercentage: genQuadArr(70),\n\t\tdescMarginLeft: 'auto',\n\t\tdescMarginRight: '0%',\n\t\tcirclePosition: {\n\t\t\twidth: [100, 100, 150, 200],\n\t\t\twidthPercentage: false,\n\t\t\tbottom: [20, 0, 0, 0],\n\t\t\tleft: [-50, -50, -50, -25],\n\t\t\tpositionPercentage: true\n\t\t}\n\t},\n\t{\n\t\theadline: \"Navigating colored routes is challenging when you're colorblind.\",\n\t\tdescription: \"Climbing relies on colors to communicate a route to a climber. That is challenging with colorblindness.\",\n\t\ttextAlign: \"left\",\n\t\tmarginRight: 'auto',\n\t\tmarginLeft: '0%',\n\t\tmarginTopBottom: genQuadArr(80),\n\t\twidthPercentage: genQuadArr(50),\n\t\tdescWidthPercentage: genQuadArr(50),\n\t\tdescMarginLeft: '0%',\n\t\tdescMarginRight: 'auto',\n\t\tcirclePosition: {\n\t\t\twidth: [130, 130, 180, 300],\n\t\t\twidthPercentage: false,\n\t\t\tbottom: [20, 0, 0, -40],\n\t\t\tright: [-100, -100, -100, -100],\n\t\t\tpositionPercentage: true\n\t\t}\n\t},\n\t{\n\t\theadline: \"Current solutions are limiting.\",\n\t\tdescription: \"Current solutions involve patterned holds, additional tape, and partner assistance. Each solution has its own challenges and limit the climber in some manner.\",\n\t\ttextAlign: \"right\",\n\t\tmarginRight: 'auto',\n\t\tmarginLeft: '40%',\n\t\tmarginTopBottom: genQuadArr(150),\n\t\twidthPercentage: genQuadArr(50),\n\t\tdescWidthPercentage: genQuadArr(70),\n\t\tdescMarginLeft: 'auto',\n\t\tdescMarginRight: '0%',\n\t\tcirclePosition: {\n\t\t\twidth: [140, 140, 200, 350],\n\t\t\twidthPercentage: false,\n\t\t\tbottom: [20, 0, 0, -80],\n\t\t\tleft: genQuadArr(-60),\n\t\t\tpositionPercentage: true\n\t\t}\n\t},\n\t{\n\t\theadline: \"Bold Colors roots for you.\",\n\t\tdescription: \"Bold colors empowers colorblind climbers to climb routes with ease. The application maps the route, emphasizing the pathway through methodologies that is clear and visible to someone who is colorblind. Allowing you the freedom to climbe with ease, independence, and without limitations.\",\n\t\ttextAlign: \"left\",\n\t\tmarginRight: 'auto',\n\t\tmarginLeft: '50%',\n\t\tmarginTopBottom: genQuadArr(150),\n\t\twidthPercentage: genQuadArr(60),\n\t\tdescWidthPercentage: genQuadArr(100),\n\t\tdescMarginLeft: '0%',\n\t\tdescMarginRight: 'auto',\n\t\tcirclePosition: {\n\t\t\twidth: [100, 100, 100, 150],\n\t\t\twidthPercentage: false,\n\t\t\tbottom: [-20, -20, -20, -20],\n\t\t\tleft: [-60, -50, -40, -40],\n\t\t\tpositionPercentage: true\n\t\t}\n\t},\n];\n\nconst FEATURES = \"Features\";\nconst FEATURES_DESCRIPTION = [\n\t\"Lorem ipsum\",\n\t\"Lorem Ipsum\"\n];\n\nexport function About() {\n\tconst { windowWidth } = useContext(GlobalContext);\n\tconst vpIndex = viewportSizeIndex(windowWidth);\n\n\treturn <div className=\"about\" id=\"about\">\n\t\t<div className=\"about-inner\">\n\t\t\t<div className=\"about-content\">\n\t\t\t\t<h1 className=\"about-header\">{HEADER}</h1>\n\t\t\t\t{TEXT_DESCRIPTIONS.map(desc => {\n\t\t\t\t\tconst floatingCircleStyles = {\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\twidth: `${desc.circlePosition.width[vpIndex]}${desc.circlePosition.widthPercentage ? '%' : 'px'}`,\n\t\t\t\t\t\theight: `${desc.circlePosition.width[vpIndex]}${desc.circlePosition.widthPercentage ? '%' : 'px'}`,\n\t\t\t\t\t\tborder: `5px dashed ${MAIN_COLOR}`,\n\t\t\t\t\t\tborderRadius: '50%'\n\t\t\t\t\t};\n\n\t\t\t\t\tif (desc.circlePosition.bottom) {\n\t\t\t\t\t\tfloatingCircleStyles.bottom = `${desc.circlePosition.bottom[vpIndex]}${desc.circlePosition.positionPercentage ? '%' : 'px'}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (desc.circlePosition.left) {\n\t\t\t\t\t\tfloatingCircleStyles.left = `${desc.circlePosition.left[vpIndex]}${desc.circlePosition.positionPercentage ? '%' : 'px'}`\n\t\t\t\t\t}\n\n\t\t\t\t\tif (desc.circlePosition.right) {\n\t\t\t\t\t\tfloatingCircleStyles.right = `${desc.circlePosition.right[vpIndex]}${desc.circlePosition.positionPercentage ? '%' : 'px'}`\n\t\t\t\t\t}\n\n\t\t\t\t\tif (desc.circlePosition.top) {\n\t\t\t\t\t\tfloatingCircleStyles.top = `${desc.circlePosition.top[vpIndex]}${desc.circlePosition.positionPercentage ? '%' : 'px'}`\n\t\t\t\t\t}\n\n\t\t\t\t\treturn <div className=\"about-item\" key={desc.headline} style={{\n\t\t\t\t\t\tmarginTop: desc.marginTopBottom[vpIndex],\n\t\t\t\t\t\tmarginBottom: desc.marginTopBottom[vpIndex],\n\t\t\t\t\t\twidth: `${desc.widthPercentage[vpIndex]}%`,\n\t\t\t\t\t\tmarginLeft: desc.marginLeft,\n\t\t\t\t\t\ttextAlign: desc.textAlign,\n\t\t\t\t\t}}>\n\t\t\t\t\t\t<h2>{desc.headline}</h2>\n\t\t\t\t\t\t<div style={{\n\t\t\t\t\t\t\twidth: `${desc.descWidthPercentage[vpIndex]}%`,\n\t\t\t\t\t\t\ttextAlign: desc.textAlign,\n\t\t\t\t\t\t\tmarginLeft: desc.descMarginLeft,\n\t\t\t\t\t\t\tmarginRight: desc.descMarginRight\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t<p>{desc.description}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"about-floating-circle\">\n\t\t\t\t\t\t\t<div style={floatingCircleStyles}></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<div className=\"about-floating-circle\">\n\t\t\t\t<div style={{\n\t\t\t\t\tpositionPercentage: true,\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\twidth: `${[100, 100, 100, 200][vpIndex]}px`,\n\t\t\t\t\theight: `${[100, 100, 100, 200][vpIndex]}px`,\n\t\t\t\t\tborder: `5px dashed ${MAIN_COLOR}`,\n\t\t\t\t\tright: `${[20, 20, 20, 20][vpIndex]}%`,\n\t\t\t\t\tborderRadius: '50%'\n\t\t\t\t}}></div>\n\t\t\t</div>\n\t\t\t<BackgroundTriangle\n\t\t\t\theight={[200, 200, 300, 400][vpIndex]}\n\t\t\t\tdirection=\"BOTTOM_LEFT\"\n\t\t\t/>\n\t\t\t<div className=\"about-features-inner\">\n\t\t\t\t<div className=\"headline-content bright-text\">\n\t\t\t\t\t<h1>{FEATURES}</h1>\n\t\t\t\t\t{FEATURES_DESCRIPTION.map(desc => <p>{desc}</p>)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Main } from './components/Main/Main';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { GlobalContext } from '../../utils/GlobalContext/GlobalContext';\nimport { useWindowWidth } from '../../utils/hooks/useWindowWidth';\nimport { NavigationBar } from './NavigationBar/NavigationBar';\nimport { Headline } from './Headline/Headline';\nimport { Team } from './Team/Team';\nimport { Footer } from './Footer/Footer';\nimport { useScrollPosition } from '../../utils/hooks/useScrollPosition';\nimport { About } from './About/About';\nimport fullImage from '../../assets/boldcolors.png';\n\nexport function Main() {\n\tconst windowWidth = useWindowWidth();\n\tconst scrollPosition = useScrollPosition();\n\n\tlet test = [];\n\tfor (let i = 0; i < 20; i++) {\n\t\ttest.push(<br />);\n\t}\n\n\treturn <>\n\t\t<GlobalContext.Provider value={{\n\t\t\tscrollPosition,\n\t\t\twindowWidth\n\t\t}}>\n\t\t\t{/* <NavigationBar />\n\t\t\t<Headline />\n\t\t\t<About />\n\t\t\t<Team />\n\t\t\t<Footer />\n\t\t\t{test} */}\n\t\t\t<img src={fullImage} style={{\n\t\t\t\twidth: '100%',\n\t\t\t\theight: 'auto'\n\t\t\t}} />\n\t\t</GlobalContext.Provider>\n\t</>\n}","import { useEffect, useState } from 'react';\n\n/**\n * useWindowWidth is the hook that will grab the window's width.\n */\nexport function useWindowWidth() {\n\tconst [width, setWidth] = useState(window.innerWidth);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", () => {\n\t\t\tsetWidth(window.innerWidth);\n\t\t});\n\t}, [])\n\n\treturn width;\n}","import { useEffect, useState } from 'react';\nimport { EnabledFeatures } from '../../_ENABLED_FEATURES/EnabledFeatures';\n\n/**\n * useWindowHeight is the hook that will grab the window's width.\n */\nexport function useScrollPosition() {\n\tconst [scrollPosition, setScrollPosition] = useState(window.scrollY);\n\n\tuseEffect(() => {\n\t\tif (EnabledFeatures.Colorify) {\n\t\t\twindow.addEventListener(\"scroll\", () => {\n\t\t\t\tsetScrollPosition(window.scrollY);\n\t\t\t});\n\t\t}\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"scroll\");\n\t\t}\n\t}, [])\n\n\treturn scrollPosition;\n}"],"sourceRoot":""}